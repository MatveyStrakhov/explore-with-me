DROP TABLE IF EXISTS
compilation_event,compilations, requests, events, users, locations, categories, points;
CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;
CREATE TABLE IF NOT EXISTS categories (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
name VARCHAR(255) UNIQUE,
CONSTRAINT pk_categories PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS locations (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
lon DOUBLE PRECISION NOT NULL,
lat DOUBLE PRECISION NOT NULL,
CONSTRAINT pk_locations PRIMARY KEY (id),
UNIQUE (lon, lat)
);
CREATE TABLE IF NOT EXISTS users (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
name VARCHAR(255) NOT NULL,
email VARCHAR(512) NOT NULL UNIQUE,
CONSTRAINT pk_users PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS events (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
annotation VARCHAR(2000) NOT NULL,
category_id BIGINT,
confirmed_requests INT,
created_on TIMESTAMP WITH TIME ZONE NOT NULL,
description VARCHAR(7000) NOT NULL,
event_date TIMESTAMP WITH TIME ZONE NOT NULL,
initiator_id BIGINT NOT NULL,
location_id BIGINT NOT NULL,
is_paid BOOLEAN NOT NULL,
participant_limit BIGINT,
published_on TIMESTAMP WITH TIME ZONE,
request_moderation BOOLEAN NOT NULL,
state VARCHAR(255) NOT NULL,
title VARCHAR(255) NOT NULL,
views BIGINT,
CONSTRAINT pk_events PRIMARY KEY (id),
CONSTRAINT fk_event_user FOREIGN KEY (initiator_id) REFERENCES users (id),
CONSTRAINT fk_event_location FOREIGN KEY (location_id) REFERENCES locations (id),
CONSTRAINT fk_event_category FOREIGN KEY (category_id) REFERENCES categories (id)
);
CREATE TABLE IF NOT EXISTS requests (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
event_id BIGINT NOT NULL,
user_id BIGINT NOT NULL,
status VARCHAR(255) NOT NULL,
created TIMESTAMP WITH TIME ZONE NOT NULL,
CONSTRAINT pk_requests PRIMARY KEY (id),
CONSTRAINT fk_request_event FOREIGN KEY (event_id) REFERENCES events (id),
CONSTRAINT fk_request_user FOREIGN KEY (user_id) REFERENCES users (id),
UNIQUE (event_id, user_id)
);
CREATE TABLE IF NOT EXISTS compilations (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
compilation_id BIGINT,
pinned BOOLEAN NOT NULL,
title VARCHAR(50) NOT NULL UNIQUE,
CONSTRAINT pk_compilations PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS compilation_event (
compilation_id BIGINT NOT NULL,
event_id BIGINT NOT NULL,
CONSTRAINT pk_compilation_event PRIMARY KEY (compilation_id, event_id),
CONSTRAINT fk_ce_compilation FOREIGN KEY (compilation_id) REFERENCES compilations (id),
CONSTRAINT fk_ce_event FOREIGN KEY (event_id) REFERENCES events (id)
);
CREATE TABLE IF NOT EXISTS points (
id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
lon DOUBLE PRECISION NOT NULL,
lat DOUBLE PRECISION NOT NULL,
radius INT NOT NULL,
name VARCHAR(255) NOT NULL,
CONSTRAINT pk_points PRIMARY KEY (id)
);


